#!/bin/bash

# Author: No√© Paniagua

#whusb is licensed under a
#Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.

#You should have received a copy of the license along with this
#work. If not, see <https://creativecommons.org/licenses/by-nc-sa/4.0/>.

#To do .....
#Write a well readme
#5. Develop error cases as when u forget an argument

# CONFIGURATION VARIABLES
SHOW_WHUSB_HEADER_END_TEXT=1  # 1-> Show the texts     0-> Disable the texts

#Colours
green="\e[0;32m\033[1m"
end="\033[0m\e[0m"
r="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
y="\e[0;33m\033[1m"
m="\e[0;35m\033[1m"
turq="\e[0;36m\033[1m"
g="\e[0;37m\033[1m"

#Configuration variables
yamlFile="usbInfo.yaml"

saveNewDevice() {
    fd=$1

    local serialNumber=$(udevadm info --name=${fd/$"/dev/"/} 2>/dev/null | grep -i ID_SERIAL_SHORT= | awk -F= '{print $2}')

	if [ -n "$serialNumber" ]; then
		#Read the data from usb and clean the strings
		local vendorID=$(udevadm info --name=${fd/$"/dev/"/} 2>/dev/null | grep -i ID_VENDOR= | awk -F= '{print $2}')
		local model=$(udevadm info --name=${fd/$"/dev/"/} 2>/dev/null | grep -i ID_MODEL_FROM_DATABASE= | awk -F= '{print $2}')

		#Show info about the device
		echo -e "${m}whusb${end}: ${turq}$fd${end} is from ${green}$vendorID${end} and model ${green}$model${end} with SN ${green}$serialNumber${end}\n"

		#Search the serial id in the database
		echo -e "${m}whusb${end}: Searching the device in database...\n"
		local nameFound
		nameFound=$(searchIntoYaml "ID_SERIAL_SHORT" $serialNumber)

		# Exist or not?? Choose if wanna save it or not...
		if [  $? -eq 0 ]; then
			echo -e "${m}whusb${end}: ${turq}$fd${end} exists in database, named as ${y}$nameFound${end}\n"
			return 0
		else
			while true; do
				echo -e -n "${m}whusb${end}: Want to save this device [y/n]? "
				read saveDevice

				case $saveDevice in
					[yY] ) echo -e -n "${m}whusb${end}: Ok, say a name for ${turq}$fd${end}: " ; break ;;
					[nN] ) echo -e "${m}whusb${end}: Ok, maybe next time :)\n" ; return ; break ;;
					* ) echo -e "${m}whusb${end}: Please answer with yes[y/Y] or not[n/N]..." ;;
				esac
			done

			read newName
			echo -e "${m}whusb${end}: USB device ${y}$newName${end} have been saved correctly!!\n"

			yq eval -i ".$newName.ID_VENDOR = \"$vendorID\"" "$yamlFile"
			yq eval -i ".$newName.ID_SERIAL_SHORT = \"$serialNumber\"" "$yamlFile"
			yq eval -i ".$newName.ID_MODEL_FROM_DATABASE = \"$model\"" "$yamlFile"
		fi
	else
		echo -e "${m}whusb${end}: Are you sure about ${turq}$fd${end}? USB's FD are in ${r}/dev/*${end}...\n"

	fi
}

findDevices() {
	if [ -s "$yamlFile" ]; then
		numDevices=$(yq eval "keys | length" "$yamlFile")
		echo -e "${m}whusb${end}: Let's show all ${r}plugged${end} devices...\n"

		#Must search each saved device
		for i in $(seq 1 $numDevices); do
			pathG="/dev"

			#Must search the value (whileeeeeee)
			for singleFD in "$pathG"/*; do
				local serialNumber=$(udevadm info --name="$singleFD" 2>/dev/null | grep -i ID_SERIAL_SHORT= | awk -F= '{print $2}')

				if [ -n "$serialNumber" ]; then
					local nameFound
					nameFound=$(searchIntoYaml "ID_SERIAL_SHORT" $serialNumber)

					if [ $? -eq 0 ]; then
						local vendorID=$(yq eval ".$nameFound.ID_VENDOR" "$yamlFile")
						local serialNumber=$(yq eval ".$nameFound.ID_SERIAL_SHORT" "$yamlFile")
						local model=$(yq eval ".$nameFound.ID_MODEL_FROM_DATABASE" "$yamlFile")

						echo -e "${m}whusb${end}: ${y}$nameFound${end}(${turq}$singleFD${end}) is from ${green}$vendorID${end} and model ${green}$model${end} with SN ${green}$serialNumber${end}\n"
						break
					fi

				fi
			done

		done
    	echo -e "${m}whusb${end}: There aren't any more known devices\n"
	else
	 	echo -e "${m}whusb${end}: There aren't any devices in backup :(\n"
	fi
}

showAllDevices() {
	echo -e "${m}whusb${end}: Let's show all devices from the backup...\n"

	if [ -s "$yamlFile" ]; then
		for names in $(yq eval "keys" "$yamlFile" | awk '{print $2}'); do
			local vendorID=$(yq eval ".$names.ID_VENDOR" "$yamlFile")
			local serialNumber=$(yq eval ".$names.ID_SERIAL_SHORT" "$yamlFile")
			local model=$(yq eval ".$names.ID_MODEL_FROM_DATABASE" "$yamlFile")

			echo -e "${m}whusb${end}: ${y}$names${end} is from ${green}$vendorID${end} and model ${green}$model${end} with SN ${green}$serialNumber${end}\n"
		done
	else
		echo -e "${m}whusb${end}: There aren't any devices in backup :(\n"
	fi
}

deleteDevice() {
	local -r deleteDevice=$1
	echo  -e "${m}whusb${end}: Searching ${y}$names${end} to delete it...\n"

	if [ -s "$yamlFile" ]; then
    	for names in $(yq eval "keys" "$yamlFile" | awk '{print $2}'); do
     	   if [[ $names = $deleteDevice ]]; then
 	          yq -i "del(.$deleteDevice)" "$yamlFile"
 	          echo -e "${m}whusb${end}: ${y}$names${end} have been deleted from the backup!\n"
              return 0
           fi
        done
    fi

    echo -e "${m}whusb${end}: This name doesn't exist in the backup :(\n"
	return 1
}

searchIntoYaml() {
	local -r yamlElement=$1
    local -r parameter=$2

	if [ -s "$yamlFile" ]; then
		for names in $(yq eval "keys" "$yamlFile" | awk '{print $2}'); do
			if [[ $parameter == $(yq eval ".$names.$yamlElement" "$yamlFile") ]]; then
				echo $names
				return 0
			fi
		done
	fi

  	return 1
}

showHelp() {
	echo -e "  ${m}whusb${end}: Work with database stored in ${r}$(pwd)/$yamlFile${end}...\n"
	echo -e "  ${m}-h${end}     Show this message"
	echo -e "  ${m}-n${end}     Info and save a device [whusb -n <Device's FD's path>]"
	echo -e "  ${m}-f${end}     Find known plugged devices"
	echo -e "  ${m}-s${end}     Show all stored devices"
	echo -e "  ${m}-d${end}     Delete a device from the backup [whusb -d <Device's name in backup>]"
	echo
}


# MAIN FUNCTION
if [[ "$SHOW_WHUSB_HEADER_END_TEXT" -eq 1 ]]; then
	echo -e "${g}[${end}**${g}]${end}***************************************${g}[${end}**${g}]${end}"
	echo -e "${g}[${end}**${g}]${end} ${r}Welcome to your devices' backup${end} ${m}whusb${end} ${g}[${end}**${g}]${end}"
	echo -e "${g}[${end}**${g}]${end}***************************************${g}[${end}**${g}]${end}\n"
fi

# Need to create the file??
if [ ! -f "$yamlFile" ]; then
    #echo "{}" > "$yamlFile"
    touch "$yamlFile"
    echo -e "->${m}whusb${end}: Backup file have been created in ${r}$(pwd)/$yamlFile${end}...\n"
fi

# Read parameters and execute functions
parameter_counter=0; while getopts "n:sfd:h" arg; do
	case $arg in 
		n) saveNewDevice $OPTARG;;
		f) findDevices;;
		d) deleteDevice $OPTARG;;
		s) showAllDevices;;
		h) showHelp;;
	esac
done

if [[ "$SHOW_WHUSB_HEADER_END_TEXT" -eq 1 ]]; then
	echo -e "${g}[${end}**${g}]${end}************************${g}[${end}**${g}]${end}"
	echo -e "${g}[${end}**${g}]${end} ${r}See you again ^^${end} ${m}whusb${end} ${g}[${end}**${g}]${end}"
	echo -e "${g}[${end}**${g}]${end}************************${g}[${end}**${g}]${end}"
fi


